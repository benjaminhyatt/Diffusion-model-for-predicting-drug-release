%Uses a WEIGHTED least squares minimization to generate a quadratic spline

%INPUTS: tt (time points), yy (AVERAGE h or D data), m (a vector with each entry m_i corresponding to the number of data
%points yy_i is averaged from -- must be computed in advance), bp (spline breakpoint locations), 
% k (order of spline) **can adjust choices of bp and k in declareglobals**
%OUTPUTS: spline and its least squares error

function [sp, lserror, a] = splinefitweighted(tt, yy, m, bp, k)

declareglobals;

% Generate knot sequence 's' by augmenting the breakpoints.  augknt(breakpoints,
% k) returns a nondecreasing and augmented knot sequence that
% has the first and last knot with exact multiplicity k.
% (Remember that number of continuity conditions at the breakpoint + number of knots
% at the breakpoint = k. Hence, fewer knots imply more continuity conditions and more
% knots imply fewer continuity conditions.)
s = augknt(bp, k);

% Generate the B-spline associated with each column j of the matrix M.
% Each B-spline is generated by a set of k+1 sequential knots
B={};% B is a cell array that stores the pp form of a bspline in each entry B{j}
for j=1:(length(s)-k)
    B{j} = bspline(s(j:(j+k)));
end

% Compute each entry M(i,j) of matrix M by using the function associated with B{j} to
% evaluate the point tt(i).  ppval(B{j}, tt(i)) evaluates the pp form b-spline
% stored in B{j} at the point tt(i).
M = zeros(length(tt), (length(s)-k));
for i=1:length(tt)
    for j=1:(length(s)-k)
        if (tt(i)>= s(j)) && tt(i) <= s(j+k) 
            M(i, j) = ppval(B{j}, tt(i)); % Evaluates the spline at time points within its domain [s(j),s(j+k)
         else
            M(i,j) = 0; % Sets the value of the spline to zero at time points outside of its domain
        end
    end
end

%Multiply row i of M and data point yy_i by m_i to set up weighted least
%squares minimization
for i= 1:length(tt)
    M(i,:) = M(i,:)*m(i);
end

yy = yy.*m; %Multiplies element-wise


% Solve the system (M'M)a=M'y for the coefficients 'a'.
a = (M'*M)\(M'*yy');

% Generate a spline using our knot points 's' and coefficients 'a.'
sp = fn2fm(spmak(s,a'),'pp');

% Compute least squares error
lserror = sqrt((sum(yy-fnval(sp, tt))).^2); 